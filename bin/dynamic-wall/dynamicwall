#!/bin/bash

# Get current user
usrnm=$(grep -i ':x:1000:' -A 0 /etc/passwd | sed 's/:x:1000:.*//')
# Get current time
date=$(date +%H | sed 's/\<0//g')
# shellcheck source=/dev/null
# Source Config File
. /home/"$usrnm"/bin/dynamic-wall/dynamicwall.config || { . /home/"$usrnm"/bin/dynamic-wall/default.config; echo "Can't find user config files, loading defaults...";} || { echo "can't find user or default config files, exiting..."; exit; }

HELP="\
Usage: dynamicwall [OPTIONS]

optional args:
  -f, --force            Skip configuration change check and update wallpaper
  -p, --preview <theme>  Run a 24 hour preview for a certain theme
  -c, --check         	 Force check configuration options and push to script
  -h, --help             show help"

function main_script() {
	if [[ "$date" -le "4" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme""16.$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme"16.$ext
	elif [[ "$date" -le "9" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$(($date - 4)).$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$(($date - 4))."$ext
	elif [[ "$date" -le "16" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$(($date - 5)).$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$(($date - 5))."$ext
	elif [[ "$date" -le "21" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$(($date - 6)).$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$(($date - 6))."$ext
	else
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme""16.$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme"16.$ext
	fi
	echo "$date" > "$oldvar_dir"/.olddate
}

function set_wallpaper() {
	full_image_path=$(realpath "$1")
	#Run process as currently logged in user, export display and DBUS session, and then evaluate wallpaper script
	sudo -u "$usrnm" \
  XDG_RUNTIME_DIR=/run/user/1000\
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	qdbus org.kde.plasmashell /PlasmaShell evaluateScript '
	    var allDesktops = desktops();
	    for (i=0;i<allDesktops.length;i++)
	    {
	        d = allDesktops[i];
	        d.wallpaperPlugin = "org.kde.image";
	        d.currentConfigGroup = Array("Wallpaper", "org.kde.image", "General");
	        d.writeConfig("Image", "file://'${full_image_path}'")
	    }
	'
}

function notify() {
  if [[ $notifications = "true" ]] || [[ $notifications = "True" ]] || [[ $notifications = "TRUE" ]]; then
    if [[ $2 = "root" ]]; then
      sudo -u "$usrnm" \
      XDG_RUNTIME_DIR=/run/user/1000\
  		DISPLAY=:0 \
  		DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
  		kdialog --title "Dynamic Wallpaper" --passivepopup "$1" 4
    elif [[ $2 = "manual" ]]; then
      kdialog --title "Dynamic Wallpaper" --passivepopup "$1" 4
    fi
  fi
}

function update_refreshrate() {
	if [[ "$scheduler" = "systemd" ]]; then
		sed -i '/OnBootSec='$active_refreshrate'/!b;cOnBootSec='$refreshrate /home/$usrnm/.config/systemd/user/dynamicwall.timer.d/2-timer.conf
		sed -i '/OnUnitActiveSec='$active_refreshrate'/!b;cOnUnitActiveSec='$refreshrate /home/$usrnm/.config/systemd/user/dynamicwall.timer.d/2-timer.conf
    notify "Refresh rate updated, reloading systemd daemons" root
		echo "Refresh rate updated, reloading systemd daemons"
		systemctl daemon-reload
	elif [[ $scheduler = "cron" ]]; then
        #necessary loop to prompt user for password needed for crontab update until correct or skipped
        wrongpass=0
        skip=false
        while true; do
            if ! sudo -n true; then
                if [ $wrongpass = 0 ]; then
                    passwd=$(kdialog --title "Dynamic Wall" --password "Enter password to update crontab")
                else
                    #Changes prompt when an incorrect password is entered
                    passwd=$(kdialog --title "Dynamic Wall" --password "Try Again")
                fi
            fi
        if [ $? = 0 ]; then #checks if ok or cancel was selected
            echo "Selected: OK"
            if echo "$passwd" | sudo -Svp ''; then
                echo "correct password"
                break
            else
                echo "Wrong Password entered"
                wrongpass=1
            fi
        else
            echo "Selected: Cancel"
            skip=true
            break
        fi
        done
        if [[ $skip = "false" ]]; then
            if [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][m] ]] || [[ "$refreshrate" == [[:xdigit:]][m] ]]; then
                refreshrate_c=${refreshrate%?}
                echo $passwd | sudo sh -c 'crontab -u '$usrnm' -l | grep -v "/home/'$usrnm'/bin/dynamic-wall/dynamicwall"  | crontab -u '$usrnm' - && crontab -u '$usrnm' -l | { cat; echo "*/'$refreshrate_c' * * * * /home/'$usrnm'/bin/dynamic-wall/dynamicwall"; } | crontab -u '$usrnm' -'
            elif [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][h] ]] || [[ "$refreshrate" == [[:xdigit:]][h] ]]; then
                refreshrate_c=${refreshrate%?}
                echo $passwd | sudo sh -c 'crontab -u '$usrnm' -l | grep -v "/home/'$usrnm'/bin/dynamic-wall/dynamicwall"  | crontab -u '$usrnm' - && crontab -u '$usrnm' -l | { cat; echo "* */'$refreshrate_c' * * * /home/'$usrnm'/bin/dynamic-wall/dynamicwall"; } | crontab -u '$usrnm' -'
            fi
            notify "Refresh rate updated, crontab refreshed" root
            echo "refresh rate updated"
        else
            echo "skipped"
        fi
	else
    notify "Uknown scheduler set in config file, not updating refreshrate..." root
		echo "Uknown scheduler set in config file, not updating refreshrate..."
	fi
	echo "$refreshrate" > "$oldvar_dir"/.active_refreshrate
}

function update_theme() {
	echo "$cur_theme" > "$oldvar_dir"/.active_theme
	# Change .jpeg file extension to .jpg before running the script
	pushd "$theme_dir/$active_theme/" > /dev/null 2>&1;for x in *.jpeg; do mv "$x" "${x%.jpeg}.jpg" 2> /dev/null; done;popd > /dev/null 2>&1
	sleep .5
  notify "Theme updated to $cur_theme" root
	echo "Theme updated to $cur_theme"
	active_theme=$cur_theme
}

function update_timeoffset() {
		echo "$timeoffset" > "$oldvar_dir"/.active_timeoffset
    notify "Time offset updated to $timeoffset" root
		echo "time offset updated"
}

function find_theme() {
		if ls -1 "$theme_dir"/"$1"/$1* > /dev/null 2>&1; then
      filedir=$(basename $(find $theme_dir -name "$1*" -type f | tail -1))
      ext=${filedir##*.}
      case $ext in
        jpg | jpeg )
          pushd "$theme_dir/$1/" > /dev/null 2>&1;for x in *.jpeg; do mv "$x" "${x%.jpeg}.jpg" 2> /dev/null; done;popd > /dev/null 2>&1
          return 1
          ;;
        png )
          return 1
          ;;
        * )
          echo "incompatible image type, exiting..."
          return 0
          exit
          ;;
      esac
    elif [[ $2 = "p" ]]; then
        return 0
    else
        printf "Did not find theme $1\nYour theme_dir may not be set correctly or your cur_theme may be mispelt, check your dynamicwall.config\nLoading default.config\n"
        notify root "Could not find $1, falling back to default.config"
        find_defaults
		fi
}

function find_defaults() {
	. /home/$usrnm/bin/dynamic-wall/default.config
	find_theme $cur_theme
	if ! [[ $? = 1 ]]; then
		echo "Can't locate default theme directory, exiting..."
		exit
	fi
}

# Checks if timeoffset is a number and then if it is range
if ! [ $timeoffset -eq $timeoffset 2> /dev/null ]; then
	echo "Time offset is invalid, loading default.config"
  notify "Invalid Time Offset($timeoffset), falling back to default.config" root
	find_defaults "timeoffset=[[:digit:]]"
elif ! [[ "$timeoffset" -le "23" && "$timeoffset" -ge "-23" ]]; then
	echo "Time offset is out of range, loading default.config"
  notify "Time Offset is out of range($timeoffset), falling back to default.config" root
	find_defaults "timeoffset=[[:digit:]]"
elif [[ $(($date + $timeoffset)) -gt 24 ]]; then
	date=$(($date - 24 + $timeoffset))
elif [[ $(($date + $timeoffset)) -lt 0 ]]; then
	date=$(($date + 24 + $timeoffset))
else
	date=$(($date + $timeoffset))
fi

# Checks if users current theme exist
find_theme $cur_theme

# Checks if refreshrate is in a valid format
if ! [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][mh] ]] && ! [[ "$refreshrate" == [[:xdigit:]][mh] ]]; then
	echo "Refresh rate is invalid, loading default.config"
  notify root "Invalid Refresh Rate($refreshrate), falling back to default.config"
	find_defaults
fi

# Checks if date is a number and then if its in a valid range
if ! [ $date -eq $date 2> /dev/null ]; then
	echo "Date returning invalid value, loading default.config"
  notify "Invalid date($date), falling back to default.config" root
elif ! [[ "$date" -le "24" && "$date" -ge "0" ]]; then
	echo "Date is out of range, this shouldn't happen... loading default.config"
  notify "Date is out of range($date), falling back to default.config" root
fi

# Check what argument was passed to script
if [[ $1 = "--preview" ]] || [[ $1 = "-p" ]]; then
	if [[ $2 = "" ]]; then
		printf "no theme selected to preview\nusage: dynamicwall [--preview] <theme>\n"
		exit
	else
		find_theme $2 p
		if [[ $? = 1 ]]; then
			active_theme=$2
		else
      notify "Couldn't find $2, exiting..." manual
			echo "Couldn't find $2, exiting..."
			exit
		fi
		trap "break" INT
		dbusRef=$(kdialog --progressbar "Previewing" 20)
		qdbus $dbusRef showCancelButton true
		for (( date = 3; date < 24; date++ )); do
			main_script
			sleep 1.5
			inc=$((`qdbus $dbusRef Get "" "value"` + 1))
			qdbus $dbusRef Set "" "value" $inc;
			if ! qdbus $dbusRef wasCancelled > /dev/null 2>&1; then
				qdbus $dbusRef close
				break
			fi
		done
		qdbus $dbusRef close
		echo "Preview Complete, reverting to normal..."
    notify "Reverting to normal..." manual
		date=$olddate
		active_theme=$cur_theme
    find_theme $active_theme
		main_script
		exit
	fi
elif ! [[ $2 = "" ]]; then
	echo "Incompatible arguments, use one at a time, exiting..."
	exit
elif [[ $1 = "--force" ]] || [[ $1 = "-f" ]]; then
	echo "Forced script to run, ignoring config changes"
	main_script
	exit
elif [[ $1 = "--check" ]] || [[ $1 = "-c" ]]; then
	echo "Updated config and forced run"
	update_refreshrate
	update_theme
	update_timeoffset
	main_script
	exit
elif [[ $1 = "--help" ]] || [[ $1 = "-h" ]]; then
	printf '%s\n' "$HELP"
	exit
elif ! [[ $1 = "" ]]; then
	echo "Unknown argument passed"
	printf '%s\n' "$HELP"
	exit
fi

# Compares current values to config file and updates script if they dont match, fallsback to defaults if new values are not valid
if [[ "$refreshrate" != "$active_refreshrate" ]]; then
	update_refreshrate
fi

if [[ "$timeoffset" != "$active_timeoffset" ]]; then
	update_timeoffset
fi

if [[ "$active_theme" != "$cur_theme" ]]; then
	update_theme
	main_script
fi

echo "Theme currently in use is $cur_theme"
echo "Current theme directory is $theme_dir"
echo "Time is currently $date"
echo "Time offset by $timeoffset"

# Check if time has changed since last exec, then set wallpaper based on time
if [[ "$olddate" != "$date" ]]; then
	main_script
else
	echo "Time hasn't changed since last run, doing nothing..."
fi
