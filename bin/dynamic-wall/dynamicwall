#!/bin/bash
# shellcheck source=dynamicwall.config

# Get current user
usrnm=$(grep -i '1000' -A 0 /etc/passwd | sed 's/:.*//')
# Get current time
date=$(date +%H | sed 's/\<0//g')
# Source Config File
. "/home/$usrnm/bin/dynamic-wall/dynamicwall.config" || { . "/home/$usrnm/bin/dynamic-wall/default.config"; echo "Can't find user config files, loading defaults...";} || { echo "Can't find user or default config files, exiting..."; exit 1; }

HELP="\
Usage: dynamicwall [OPTIONS]

optional args:
  -f, --force            Skip configuration check and update wallpaper immediately
  -p, --preview <theme>  Run a 24 hour preview for a certain theme***EXPERIMENTAL***
  -c, --check         	 Force check configuration options and push to script
  -h, --help             show help"

if [[ $1 = "--help" ]] || [[ $1 = "-h" ]]; then
	printf '%s\n' "$HELP"
	exit 0
fi

#Determine image to use based on time
function main_script() {
	if [[ "$date" -le "4" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme""16.$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme""16.$ext"
	elif [[ "$date" -le "9" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$((date - 4)).$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$((date - 4)).$ext"
	elif [[ "$date" -le "16" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$((date - 5)).$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$((date - 5)).$ext"
	elif [[ "$date" -le "21" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$((date - 6)).$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$((date - 6)).$ext"
	else
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme""16.$ext"
		set_wallpaper "$theme_dir/$active_theme/$active_theme""16.$ext"
	fi
	echo "$date" > "$oldvar_dir/olddate"
}

#Set wallpaper determined in function above
function set_wallpaper() {
	full_image_path=$(realpath "$1")
	#Run process as currently logged in user, export display and DBUS session, and then evaluate wallpaper script, needed for automatic updating
  if [[ "$(id -u)" = 1000 ]]; then
    prefix=(env "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
  else
    prefix=(sudo -u "$usrnm" \
    "XDG_RUNTIME_DIR=/run/user/1000" \
    "DISPLAY=:0" \
    "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
  fi
  "${prefix[@]}" \
  	qdbus org.kde.plasmashell /PlasmaShell evaluateScript '
  	    var allDesktops = desktops();
  	    for (i=0;i<allDesktops.length;i++)
  	    {
  	        d = allDesktops[i];
  	        d.wallpaperPlugin = "org.kde.image";
  	        d.currentConfigGroup = Array("Wallpaper", "org.kde.image", "General");
  	        d.writeConfig("Image", "file://'${full_image_path}'")
  	    }
  	'
}

#Check config and show notifications if enabled
function notisend() {
  case $notifications in
    t | T | true | True | TRUE )
      if [[ "$(id -u)" = 1000 ]]; then
        prefix=(env "XDG_RUNTIME_DIR=/run/user/1000")
      else
        prefix=(sudo -u "$usrnm" \
        "XDG_RUNTIME_DIR=/run/user/1000" \
        "DISPLAY=:0" \
        "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
      fi
      "${prefix[@]}" \
      kdialog --title "Dynamic Wallpaper" --passivepopup "$1" 4
      ;;
    f | F | false | False | FALSE )
      ;;
    * )
      echo "Uknown option for notification settings, disabling notifications..."
      ;;
  esac
  echo "$1"
}

#Update refreshrate depending on if systemd or cron is in use
function update_refreshrate() {
	if [[ "$scheduler" = "systemd" ]]; then
    if [[ "${refreshrate: -1}" = m ]]; then
      refreshrate_c="\*:0\/${refreshrate%?}"
    elif [[ "${refreshrate: -1}" = h ]]; then
      refreshrate_c="00\/${refreshrate%?}:00"
    fi
    sed -i '/OnCalendar=00:\/'"${active_refreshrate%?}"'/!b;cOnCalendar='"$refreshrate_c" /home/"$usrnm"/.config/systemd/user/dynamicwall.timer.d/2-timer.conf
    sed -i '/OnCalendar=\*:0\/'"${active_refreshrate%?}"'/!b;cOnCalendar='"$refreshrate_c" /home/"$usrnm"/.config/systemd/user/dynamicwall.timer.d/2-timer.conf
		echo "$refreshrate" > "$oldvar_dir"/active_refreshrate
		notisend "Refresh rate updated, reloading systemd daemons"
		systemctl daemon-reload
	elif [[ "$scheduler" = "cron" ]]; then
		#Necessary loop to prompt user for password needed for crontab update until correct or skipped
		wrongpass=0
		while true; do
			if ! sudo -n true; then
				if [[ "$wrongpass" = 0 ]]; then
					passwd=$(kdialog --title "Dynamic Wall" --password "Enter password to update crontab")
				else
					#Changes prompt when an incorrect password is entered
					passwd=$(kdialog --title "Dynamic Wall" --password "Try Again")
				fi
			fi
			if [[ "$?" = 0 ]]; then #Checks if ok or cancel was selected
				echo "Selected: OK"
				if echo "$passwd" | sudo -Svp ''; then
					echo "correct password"
					if [[ "${refreshrate: -1}" = m ]]; then
						refreshrate_c=${refreshrate%?}
						echo "$passwd" | sudo sh -c 'crontab -u '"$usrnm"' -l | grep -v "/home/'"$usrnm"'/bin/dynamic-wall/dynamicwall"  | crontab -u '"$usrnm"' - && crontab -u '"$usrnm"' -l | { cat; echo "*/'"$refreshrate_c"' * * * * /home/'"$usrnm"'/bin/dynamic-wall/dynamicwall"; } | crontab -u '"$usrnm"' -'
					elif [[ "${refreshrate: -1}" = h ]]; then
						refreshrate_c=${refreshrate%?}
						echo "$passwd" | sudo sh -c 'crontab -u '"$usrnm"' -l | grep -v "/home/'"$usrnm"'/bin/dynamic-wall/dynamicwall"  | crontab -u '"$usrnm"' - && crontab -u '"$usrnm"' -l | { cat; echo "* */'"$refreshrate_c"' * * * /home/'"$usrnm"'/bin/dynamic-wall/dynamicwall"; } | crontab -u '"$usrnm"' -'
					fi
					echo "$refreshrate" > "$oldvar_dir"/active_refreshrate
					notisend "Refresh rate updated, crontab refreshed"
					break
				else
					echo "Wrong Password entered"
					wrongpass=1
				fi
			else
				echo "Selected: Cancel"
				echo "Skipped"
				break
			fi
		done
	else
		notisend "Uknown scheduler set in config file, not updating refreshrate..."
	fi
}

function update_theme() {
	echo "$cur_theme" > "$oldvar_dir"/active_theme
	notisend "Theme updated to $cur_theme"
	active_theme="$cur_theme"
}

function update_timeoffset() {
	echo "$timeoffset" > "$oldvar_dir"/active_timeoffset
	notisend "Time offset updated to $timeoffset"
}

function load_overrides() {
	if . "$theme_dir/$cur_theme/override.config" 2> /dev/null
	then
	  case $printvariables in
	    TRUE | True | true | T | t )
	    echo "Loading variable overrides from override.config for $cur_theme"
	    echo "The following variables have been overridden:"
	    awk '/=/ && !/#/' "$theme_dir/$cur_theme/override.config"
	    echo ""
	      ;;
	    FALSE | False | false | F | f )
	      ;;
	    * )
	      echo "Unknown option \"$printvariables\" for printvariables, assuming false"
	      ;;
	  esac
	fi
}

function find_theme() {
	if ls -1 "$theme_dir"/"$1"/"$1"* > /dev/null 2>&1; then
		filedir=$(basename "$(find "$theme_dir" -name "$1*" -type f | tail -1)")
		ext=${filedir##*.}
		case $ext in
			jpg | jpeg )
				if [[ $2 != d ]]; then
					load_overrides
				fi
				return 0
				;;
			png )
				if [[ $2 != d ]]; then
					load_overrides
				fi
				return 0
				;;
			* )
				echo "Incompatible image type($ext), exiting..."
				return 1
				exit 1
				;;
		esac
	else
		((++attempts))
		echo ""
		echo "Attempt $attempts"
		if [[ $attempts = 1 ]]; then
			notisend "Could not find $1, attempting to recover..."
			printf "Your theme_dir may not be set correctly or your cur_theme may be mispelt, check your dynamicwall.config\\nAttempting to recover...\\n"
			echo "Attempting to use default theme directory"
			find_defaults "theme_dir" "$2"
		elif [[ $attempts = 2 ]]; then
			if [[ $p = "set" ]]; then
				return 1
			fi
			echo "Could not find theme in default directory"
			echo "Attempting to use default theme in users theme directory"
			eval "$(grep "theme_dir" < /home/"$usrnm"/bin/dynamic-wall/dynamicwall.config)"
			find_defaults "cur_theme" "$2"
		elif [[ $attempts = 3 ]]; then
			echo "Could not find default theme in users theme directory"
			echo "Attempting to use default theme in default theme directory"
			find_defaults "theme_dir" "$2"
		else
			echo "There are some major problems with your installation/configuration, reinstall dynamicwall"
			return 1
		fi
	fi
}

function find_defaults() {
	if ! [[ -f /home/$usrnm/bin/dynamic-wall/default.config ]]; then
		echo "Can't find default config file, exiting..."
		exit 1
	fi
	eval "$(grep "$1" < /home/"$usrnm"/bin/dynamic-wall/default.config)"
  notisend "loaded $(grep "$1" < /home/"$usrnm"/bin/dynamic-wall/default.config)"
	if [[ $2 = "p" ]]; then
		find_theme "$previewtheme" "d"
    return $?
	else
		find_theme "$cur_theme" "d"
		if [[ $? = 1 ]]; then
  		echo "Can't locate $cur_theme in default theme directory, exiting..."
  		exit 1
		fi
    active_theme=$cur_theme
	fi
}

# Checks if users current theme exist
find_theme "$cur_theme"

# Checks if timeoffset is a number and then if it is range and checks if refreshrate is in a valid format
for ((n=0;n<2;n++)); do
  if ! [ "$timeoffset" -eq "$timeoffset" ] 2> /dev/null; then
  	notisend "Invalid Time Offset($timeoffset), loading defaults..."
  	find_defaults "timeoffset=[[:digit:]]"
    valid1=false
  elif ! [[ "$timeoffset" -le "23" && "$timeoffset" -ge "-23" ]]; then
  	notisend "Time Offset is out of range($timeoffset), loading defaults..."
  	find_defaults "timeoffset=[[:digit:]]"
    valid1=false
  elif [[ $((date + timeoffset)) -gt 24 ]]; then
  	date=$((date - 24 + timeoffset))
    valid1=true
  elif [[ $((date + timeoffset)) -lt 0 ]]; then
  	date=$((date + 24 + timeoffset))
    valid1=true
  else
  	date=$((date + timeoffset))
    valid1=true
  fi
  if ! [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][mh] || "$refreshrate" == [[:xdigit:]][mh] ]] || [[ "${refreshrate: -1}" = h && "${refreshrate%?}" -ge 24 || "${refreshrate: -1}" = m && "${refreshrate%?}" -ge 60 || "${refreshrate%?}" -le 0 ]]; then\
    notisend "Invalid Refresh Rate($refreshrate), loading defaults..."
    find_defaults "refreshrate=[[:digit:]]"
    valid2=false
  else
    valid2=true
  fi
done

# Exit if defaults return invalid values
if [[ "$valid1" = "false" ]] || [[ "$valid2" = "false" ]]; then
  notisend "There is something wrong with your default config options, reinstall"
  exit 1
fi

# Checks if date is a number and then if its in a valid range
if ! [ $date -eq $date ] 2> /dev/null; then
	notisend "Invalid date($date), loading defaults..."
	date=$(date +%H | sed 's/\<0//g')
elif ! [[ "$date" -le "24" && "$date" -ge "0" ]]; then
	notisend "Date is out of range($date), loading defaults..."
	date=$(date +%H | sed 's/\<0//g')
fi

# Check what argument was passed to script
if [[ $1 = "--preview" ]] || [[ $1 = "-p" ]]; then
  p="set"
  previewtheme="$2"
	if [[ $2 = "" ]]; then
		printf "no theme selected to preview\\nusage: dynamicwall [--preview] <theme>\\n"
		exit 1
	else
		if find_theme "$2" p; then
      active_theme=$2
    else
      notisend "Couldn't find $2, exiting..."
      exit 1
    fi
		trap "break" INT
		dbusRef=$(kdialog --progressbar "Previewing" 20)
		qdbus $dbusRef showCancelButton true
    qdbus $dbusRef Set "" "value" 0
		for (( date = 3 + timeoffset; date < 24 + timeoffset; date++ )); do
			date +"%l:%M %p" -d $((date - timeoffset));
			main_script;
			sleep 1.5;
			inc=$(($(qdbus $dbusRef Get "" "value") + 1));
			qdbus $dbusRef Set "" "value" $inc;
			if ! qdbus $dbusRef wasCancelled > /dev/null 2>&1; then
				break;
			fi
		done
		qdbus $dbusRef close 2> /dev/null
		notisend "Preview complete, reverting to normal..."
		date=$olddate
		active_theme="$cur_theme"
		find_theme "$active_theme"
		main_script
		exit 0
	fi
elif [[ $1 = "--force" ]] || [[ $1 = "-f" ]]; then
  date=$2
	main_script
  echo "Forced script to run, ignoring config changes"
	exit 0
elif ! [[ $2 = "" ]]; then
  echo "Incompatible arguments, use one at a time, exiting..."
  exit 1
elif [[ $1 = "--check" ]] || [[ $1 = "-c" ]]; then
	update_refreshrate
	update_theme
	update_timeoffset
	main_script
  echo "Updated config and forced run"
	exit 0
elif ! [[ $1 = "" ]]; then
	echo "Unknown argument passed"
	printf '%s\n' "$HELP"
	exit 1
fi

# Compares current values to config file and updates script if they dont match, fallsback to defaults if new values are not valid
if [[ "$refreshrate" != "$active_refreshrate" ]]; then
	update_refreshrate
fi

if [[ "$timeoffset" != "$active_timeoffset" ]]; then
	update_timeoffset
fi

if [[ "$active_theme" != "$cur_theme" ]]; then
	update_theme
	main_script
  olddate=$date
fi

case $printvariables in
  TRUE | True | true | T | t )
    echo "Theme currently in use is $cur_theme"
    echo "Current theme directory is $theme_dir"
    echo "Time is currently $date"
    echo "Time offset by $timeoffset"
    echo "Refreshrate is $refreshrate"
    ;;
  FALSE | False | false | F | f )
    ;;
  * )
    echo "Unknown option \"$printvariables\" for printvariables, assuming false"
    ;;
esac


# Check if time has changed since last exec, then set wallpaper based on time
if [[ "$olddate" != "$date" ]]; then
	main_script
else
	echo "Time hasn't changed since last run, doing nothing..."
fi
