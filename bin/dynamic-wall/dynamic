#!/bin/bash

# Get current user
usrnm=$(logname)
# Get current time
date=$(date +%H | sed 's/\<0//g')
# shellcheck source=/dev/null
# Source Config File
. /home/"$usrnm"/bin/dynamic-wall/dynamicwall.config || echo "Can't find user config, loading defaults..."; . /home/"$usrnm"/bin/dynamic-wall/default.config || echo "Can't find user config or default config, exiting..."; exit

function main_script() {
	if [[ "$date" -le "4" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme""16.jpg"
		set_wallpaper "$theme_dir/$active_theme/$active_theme"16.jpg
	elif [[ "$date" -le "9" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$(($date - 4)).jpg"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$(($date - 4))."jpg
	elif [[ "$date" -le "16" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$(($date - 5)).jpg"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$(($date - 5))."jpg
	elif [[ "$date" -le "21" ]]; then
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme$(($date - 6)).jpg"
		set_wallpaper "$theme_dir/$active_theme/$active_theme$(($date - 6))."jpg
	else
		echo "exec set_wallpaper $theme_dir/$active_theme/$active_theme""16.jpg"
		set_wallpaper "$theme_dir/$active_theme/$active_theme"16.jpg
	fi
	echo "$date" > "$oldvar_dir"/.olddate
}

function set_wallpaper() {
	full_image_path=$(realpath "$1")
	#Run process as currently logged in user, export display and DBUS session, and then evaluate wallpaper script
	sudo -u "$usrnm" \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	qdbus org.kde.plasmashell /PlasmaShell evaluateScript '
	    var allDesktops = desktops();
	    for (i=0;i<allDesktops.length;i++)
	    {
	        d = allDesktops[i];
	        d.wallpaperPlugin = "org.kde.image";
	        d.currentConfigGroup = Array("Wallpaper", "org.kde.image", "General");
	        d.writeConfig("Image", "file://'${full_image_path}'")
	    }
	'
}

function update_refreshrate() {
		sed -i '/OnBootSec='$active_refreshrate'/!b;cOnBootSec='$refreshrate /home/$usrnm/.config/systemd/user/dynamicwall.timer.d/2-timer.conf
		sed -i '/OnUnitActiveSec='$active_refreshrate'/!b;cOnUnitActiveSec='$refreshrate /home/$usrnm/.config/systemd/user/dynamicwall.timer.d/2-timer.conf
		echo "$refreshrate" > "$oldvar_dir"/.active_refreshrate
		sudo -u "$usrnm" \
		DISPLAY=:0 \
		DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
		kdialog --title "Dynamic Wallpaper" --passivepopup "Refresh rate updated, reloading systemd daemons" 5
		echo "refresh rate updated"
		systemctl daemon-reload
}

function update_theme() {
	echo "$cur_theme" > "$oldvar_dir"/.active_theme
	# Change .jpeg file extension to .jpg before running the script
	pushd "$theme_dir/$active_theme/" > /dev/null 2>&1;for x in *.jpeg; do mv "$x" "${x%.jpeg}.jpg" 2> /dev/null; done;popd > /dev/null 2>&1
	sleep .5
	sudo -u "$usrnm" \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	kdialog --title "Dynamic Wallpaper" --passivepopup "Theme updated to $cur_theme" 4
	echo "theme updated"
	active_theme=$cur_theme
}

function update_timeoffset() {
		echo $timeoffset > $oldvar_dir/.active_timeoffset
		sudo -u $usrnm \
		DISPLAY=:0 \
		DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
		kdialog --title "Dynamic Wallpaper" --passivepopup "Time offset updated to $timeoffset" 3
		echo "time offset updated"
}

function find_theme() {
	if [ "$1" = "config" ]; then
		if ! ls -1 "$theme_dir"/"$cur_theme"/$cur_theme* > /dev/null 2>&1; then
			printf "Did not find theme $cur_theme\nYour theme_dir may not be set correctly or your cur_theme may be mispelt, check your dynamicwall.config\nLoading default.config"
				sudo -u $usrnm \
				DISPLAY=:0 \
				DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
				kdialog --title "Dynamic Wallpaper" --passivepopup "Could not find $cur_theme, falling back to default.config" 4
				find_defaults
		fi
	else
		if ls -1 "$theme_dir"/$1/$1* > /dev/null 2>&1; then
			pushd "$theme_dir/$1/" > /dev/null 2>&1;for x in *.jpeg; do mv "$x" "${x%.jpeg}.jpg" 2> /dev/null; done;popd > /dev/null 2>&1
			return 1
		else
			echo "Could not locate theme \"$1\""
			kdialog --title "Dynamic Wallpaper" --passivepopup "Could not locate theme \"$1\"" 4
			return 0
		fi
	fi
}

function find_defaults() {
	. /home/$usrnm/bin/dynamic-wall/default.config
	find_theme $cur_theme
	if ! [[ $? = 1 ]]; then
		echo "Can't locate default theme directory, exiting..."
		exit
	fi
}

# Checks if timeoffset is a number and then if it is range
# 2> /dev/null
if ! [ $timeoffset -eq $timeoffset ]; then
	echo "Time offset is invalid, loading default.config"
	sudo -u $usrnm \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	kdialog --title "Dynamic Wallpaper" --passivepopup "Invalid Time Offset($timeoffset), falling back to default.config" 4
	find_defaults
elif ! [[ "$timeoffset" -le "23" && "$timeoffset" -ge "-23" ]]; then
	echo "Time offset is out of range, loading default.config"
	sudo -u $usrnm \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	kdialog --title "Dynamic Wallpaper" --passivepopup "Time Offset is out of range($timeoffset), falling back to default.config" 4
	find_defaults
elif [[ $(($date + $timeoffset)) -gt 24 ]]; then
	date=$(($date - 24 + $timeoffset))
elif [[ $(($date + $timeoffset)) -lt 0 ]]; then
	date=$(($date + 24 + $timeoffset))
else
	date=$(($date + $timeoffset))
fi

# Checks if users current theme exist
find_theme config

# Checks if refreshrate is in a valid format
if ! [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][mh] ]] && ! [[ "$refreshrate" == [[:xdigit:]][mh] ]]; then
	echo "Refresh rate is invalid, loading default.config"
	sudo -u $usrnm \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	kdialog --title "Dynamic Wallpaper" --passivepopup "Invalid Refresh Rate($refreshrate), falling back to default.config" 3
	find_defaults
fi

# Checks if date is a number and then if its in a valid range
#2> /dev/null
if ! [ $date -eq $date ]; then
	echo "Date returning invalid value, loading default.config"
	sudo -u $usrnm \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	kdialog --title "Dynamic Wallpaper" --passivepopup "Invalid date($date), falling back to default.config" 4
	find_defaults
elif ! [[ "$date" -le "24" && "$date" -ge "0" ]]; then
	echo "Date is out of range, this shouldn't happen... loading default.config"
	sudo -u $usrnm \
	DISPLAY=:0 \
	DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
	kdialog --title "Dynamic Wallpaper" --passivepopup "Date is out of range($date), falling back to default.config" 4
	find_defaults
fi

# Check what argument was passed to script
if [[ $1 = "--preview" ]] || [[ $1 = "-p" ]]; then
	if [[ $2 = "" ]]; then
		printf "no theme selected to preview\nusage: ./home/$usrnm/bin/dynamic-wall/dynamic [--preview] <theme>\n"
		exit
	else
		find_theme $2
		if [[ $? = 1 ]]; then
			active_theme=$2
		else
			kdialog --title "Dynamic Wallpaper" --passivepopup "Reverting to normal..." 4
			echo "exiting..."
			exit
		fi
		trap "break" INT
		dbusRef=$(kdialog --progressbar "Previewing" 20)
		qdbus $dbusRef showCancelButton true
		for (( date = 3; date < 24; date++ )); do
			main_script
			sleep 1.5
			inc=$((`qdbus $dbusRef Get "" "value"` + 1))
			qdbus $dbusRef Set "" "value" $inc;
			if ! qdbus $dbusRef wasCancelled > /dev/null 2>&1; then
				qdbus $dbusRef close
				break
			fi
		done
		qdbus $dbusRef close
		echo "Preview Complete, reverting to normal..."
		date=$olddate
		active_theme=$cur_theme
		main_script
		exit
	fi
elif ! [[ $2 = "" ]]; then
	echo "Incompatible arguments, use one at a time, exiting..."
	exit
elif [[ $1 = "--force" ]] || [[ $1 = "-f" ]]; then
	echo "Forced script to run, ignoring config changes"
	main_script
	exit
elif [[ $1 = "--update" ]] || [[ $1 = "-u" ]]; then
	echo "Updated config and forced run"
	update_refreshrate
	update_theme
	update_timeoffset
	main_script
	exit
elif ! [[ $1 = "" ]]; then
	echo "Unknown argument passed, exiting..."
	exit
fi

# Compares current values to config file and updates config if they dont match, fallsback to defaults if new values are not valid
if [[ "$refreshrate" != "$active_refreshrate" ]]; then
	update_refreshrate
fi

if [[ "$timeoffset" != "$active_timeoffset" ]]; then
	update_timeoffset
fi

if [[ "$active_theme" != "$cur_theme" ]]; then
	update_theme
	main_script
fi

echo "Theme currently in use is $cur_theme"
echo "Current theme directory is $theme_dir"
echo "Time is currently $date"
echo "Time offset by $timeoffset"

# Check if time has changed since last exec, then set wallpaper based on time
if [[ "$olddate" != "$date" ]]; then
	main_script
else
	echo "Time hasn't changed since last run, doing nothing..."
fi
