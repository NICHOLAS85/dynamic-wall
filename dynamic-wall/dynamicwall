#!/bin/bash
# shellcheck source=dynamicwall.config

# Get current user
usrnm=$(grep -i '1000' -A 0 /etc/passwd | sed 's/:.*//')
id="$(id -u)"
# Get current time
date=$(date +%H | sed 's/\<0//g')
install_dir="/home/$usrnm/bin"
scheduler=systemd
# Source Config File
. "$install_dir/dynamic-wall/dynamicwall.config" || { . "$install_dir/dynamic-wall/default.config"; notisend "Can't find user config files, loading defaults...";} || { notisend "Can't find user or default config files, exiting..."; exit 1; }
# Get cached values
oldvar_dir="$install_dir/dynamic-wall/.oldvar"
olddate=$(cat $oldvar_dir/olddate)
active_theme=$(cat $oldvar_dir/active_theme)
active_timeoffset=$(cat $oldvar_dir/active_timeoffset)
active_refreshrate=$(cat $oldvar_dir/active_refreshrate)

HELP="\
Usage: dynamicwall [OPTIONS]

optional args:
  -f, --force [time]     Update wallpaper immediately, optionally to a specific time
  -p, --preview <theme>  Run a 24 hour preview for a certain theme***EXPERIMENTAL***
  -c, --check         	 Force check configuration options and push to script
  -s, --status           Display systemd service status/crontab and system-sleep script log
  -l, --list             List available themes to choose from
  -h, --help             Show help"

case $1 in
  --help | -h)
    printf '%s\n' "$HELP"
    exit 0
  ;;
  --status | -s)
    if [[ $scheduler = systemd ]]; then
      systemctl --user status dynamicwall.timer dynamicwall.service
    elif [[ $scheduler = cron ]]; then
      [[ -f /lib/systemd/system-sleep/dynamicwall.sh || -f /usr/lib/systemd/system-sleep/dynamicwall.sh ]] && journalctl -b -u systemd-suspend.service
      crontab -l
    else
      echo "Cant determine scheduler in use, reinstall"
      exit 1
    fi
    exit 0
  ;;
  --list | -l)
    echo "Available themes:"
    ls $theme_dir
    exit 0
  ;;
esac && if [[ -n $2 ]]; then echo "ignoring extra args..."; fi

#Determine image to use based on time
function main_script() {
	if [[ "$date" -le "4" || "$date" -gt "21" ]]; then
		set_wallpaper "$theme_dir/$active_theme/$active_theme""16.$ext"
	elif [[ "$date" -le "9" ]]; then
		set_wallpaper "$theme_dir/$active_theme/$active_theme$((date - 4)).$ext"
	elif [[ "$date" -le "16" ]]; then
		set_wallpaper "$theme_dir/$active_theme/$active_theme$((date - 5)).$ext"
	elif [[ "$date" -le "21" ]]; then
		set_wallpaper "$theme_dir/$active_theme/$active_theme$((date - 6)).$ext"
	fi
	echo "$date" > "$oldvar_dir/olddate"
}

#Set wallpaper determined in function above
function set_wallpaper() {
  echo "exec set_wallpaper $1"
  full_image_path=$(realpath "$1")
	#Run process as currently logged in user, export display and DBUS session, and then evaluate wallpaper script, needed for automatic updating
  setwallscript="var allDesktops = desktops();
	    for (i=0;i<allDesktops.length;i++)
	    {
	        d = allDesktops[i];
	        d.wallpaperPlugin = 'org.kde.image';
	        d.currentConfigGroup = Array('Wallpaper', 'org.kde.image', 'General');
	        d.writeConfig('Image', 'file://${full_image_path}')
	    }"
  if [[ $id = 1000 ]]; then
    prefix=(env "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
  else
    prefix=(sudo -u "$usrnm" \
    "XDG_RUNTIME_DIR=/run/user/1000" \
    "DISPLAY=:0" \
    "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
  fi
  "${prefix[@]}" \
	qdbus org.kde.plasmashell /PlasmaShell evaluateScript "${setwallscript}" || { notisend "Error setting wallpaper, exiting..." ; exit 1; }
}

#check true or false config options
function trueorfalse() {
  case $1 in
    TRUE | True | true | T | t )
      return 0
      ;;
    FALSE | False | false | F | f )
      return 1
      ;;
    * )
      echo "Unknown option \"$1\", assuming false. Check your config file...."
      return 1
      ;;
  esac
}

#Check config and show notifications if enabled
function notisend() {
  if trueorfalse $notifications; then
    if [[ $id = 1000 ]]; then
      prefix=(env "XDG_RUNTIME_DIR=/run/user/1000")
    else
      prefix=(sudo -u "$usrnm" \
      "XDG_RUNTIME_DIR=/run/user/1000" \
      "DISPLAY=:0" \
      "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
    fi
    "${prefix[@]}" \
    kdialog --title "Dynamic Wallpaper" --passivepopup "$1" 4
  fi
  echo "$1"
}

#Update refreshrate depending on if systemd or cron is in use
function update_refreshrate() {
	if [[ "$scheduler" = "systemd" ]]; then
    if [[ "${refreshrate: -1}" = m ]]; then
      refreshrate_c="\*:0\/${refreshrate%?}"
    elif [[ "${refreshrate: -1}" = h ]]; then
      refreshrate_c="00\/${refreshrate%?}:00"
    fi
    sed -i '/OnCalendar=00:\/'"${active_refreshrate%?}"'/!b;cOnCalendar='"$refreshrate_c" "/home/$usrnm/.config/systemd/user/dynamicwall.timer.d/2-timer.conf"
    sed -i '/OnCalendar=\*:0\/'"${active_refreshrate%?}"'/!b;cOnCalendar='"$refreshrate_c" "/home/$usrnm/.config/systemd/user/dynamicwall.timer.d/2-timer.conf"
		echo "$refreshrate" > "$oldvar_dir/active_refreshrate"
		notisend "Refresh rate updated, reloading systemd daemons"
		systemctl --user daemon-reload
	elif [[ "$scheduler" = "cron" ]]; then
		#Necessary loop to prompt user for password needed for crontab update until correct or skipped
		wrongpass=false
		while true; do
			if ! sudo -n true; then
				if $wrongpass; then
          #Changes prompt when an incorrect password is entered
          passwd=$(kdialog --title "Dynamic Wall" --password "Try Again")
				else
          passwd=$(kdialog --title "Dynamic Wall" --password "Enter password to update crontab")
				fi
			fi
			if [[ "$?" = 0 ]]; then #Checks if ok or cancel was selected
				echo "Selected: OK"
				if echo "$passwd" | sudo -Svp ''; then
					echo "correct password"
					if [[ "${refreshrate: -1}" = m ]]; then
            prefix=(\"\*/"${refreshrate%?}" \*)
					elif [[ "${refreshrate: -1}" = h ]]; then
            prefix=(\"\* \*/"${refreshrate%?}")
					fi
          echo "$passwd" | sudo sh -c 'crontab -u '"$usrnm"' -l | grep -v '"$install_dir"'/dynamic-wall/dynamicwall"  | crontab -u '"$usrnm"' - && crontab -u '"$usrnm"' -l | { cat; echo '${prefix[*]}' * * * '"$install_dir"'/dynamic-wall/dynamicwall"; } | crontab -u '"$usrnm"' -'
					echo "$refreshrate" > "$oldvar_dir/active_refreshrate"
					notisend "Refresh rate updated, crontab refreshed"
					break
				else
					echo "Wrong Password entered"
					wrongpass=true
				fi
			else
				echo "Selected: Cancel"
				echo "Skipped"
				break
			fi
		done
	else
		notisend "Uknown scheduler set in config file, not updating refreshrate..."
	fi
}

function update_theme() {
	echo "$cur_theme" > "$oldvar_dir/active_theme"
	notisend "Theme updated to $cur_theme"
	active_theme="$cur_theme"
}

function update_timeoffset() {
	echo "$timeoffset" > "$oldvar_dir/active_timeoffset"
	notisend "Time offset updated to $timeoffset"
}

function load_overrides() {
	if . "$theme_dir/$cur_theme/override.config" 2> /dev/null
	then
    if trueorfalse $printvariables; then
      echo "Loading variable overrides from override.config for $cur_theme"
      echo "The following variables have been overridden:"
      awk '/=/ && !/#/' "$theme_dir/$cur_theme/override.config"
      echo ""
    fi
	fi
}

function find_theme() {
	if ls -1 "$theme_dir/$1/$1"* > /dev/null 2>&1; then
		filedir=$(basename "$(find "$theme_dir" -name "$1*" -type f | tail -1)")
		ext=${filedir##*.}
		case $ext in
			jpg | jpeg | png )
				if [[ $2 != d ]]; then
					load_overrides
				fi
				return 0
				;;
			* )
				echo "Incompatible image type($ext), exiting..."
				exit 1
				;;
		esac
	else
		((++attempts))
		echo ""
		echo "Attempt $attempts"
		if [[ $attempts = 1 ]]; then
			notisend "Could not find $1, attempting to recover..."
			printf "Your theme_dir may not be set correctly or your cur_theme may be mispelt, check your dynamicwall.config"
			echo "Attempting to use default theme directory"
			find_defaults "theme_dir" "$2"
		elif [[ $attempts = 2 ]]; then
			if [[ $3 = "p" ]]; then
				return 1
			fi
			echo "Could not find theme in default directory"
			echo "Attempting to use default theme in users theme directory"
			eval "$(grep "theme_dir" < "$install_dir/dynamic-wall/dynamicwall.config")"
			find_defaults "cur_theme" "$2"
		elif [[ $attempts = 3 ]]; then
			echo "Could not find default theme in users theme directory"
			echo "Attempting to use default theme in default theme directory"
			find_defaults "theme_dir" "$2"
		else
			notisend "There are some major problems with your installation/configuration, reinstall dynamicwall"
			return 1
		fi
	fi
}

# Loads default value fed into function. If previewing, locate
function find_defaults() {
	if ! [[ -f $install_dir/dynamic-wall/default.config ]]; then
		notisend "Can't find default config file, exiting..."
		exit 1
	fi
	eval "$(grep "$1" < "$install_dir/dynamic-wall/default.config")"
  notisend "loaded $(grep "$1" < "$install_dir/dynamic-wall/default.config")"
  if [[ $1 = "theme_dir" ]] || [[ $1 = "cur_theme" ]]; then
  	if [[ $2 = "p" ]]; then
  		find_theme "$previewtheme" d p
      return $?
  	elif [[ "$cur_theme" != "$active_theme" ]]; then
  		if ! find_theme "$cur_theme" d; then
    		echo "Can't locate $cur_theme in default theme directory, exiting..."
    		exit 1
  		fi
      active_theme="$cur_theme"
  	fi
  fi
}

# Checks if users current theme exist
find_theme "$cur_theme"

# Checks if timeoffset is a number and then if it is range and checks if refreshrate is in a valid format
valid1=false
valid2=false
for ((n=0;n<2;n++)); do
  if ! [ "$timeoffset" -eq "$timeoffset" ] 2> /dev/null; then
  	notisend "Invalid Time Offset($timeoffset), loading defaults..."
  	find_defaults "timeoffset=[[:digit:]]"
  else
    if ! [[ "$timeoffset" -le "23" && "$timeoffset" -ge "-23" ]]; then
    	notisend "Time Offset is out of range($timeoffset), loading defaults..."
    	find_defaults "timeoffset=[[:digit:]]"
    elif [[ $((date + timeoffset)) -gt 24 ]]; then
    	date=$((date - 24 + timeoffset))
      valid1=true
    elif [[ $((date + timeoffset)) -lt 0 ]]; then
    	date=$((date + 24 + timeoffset))
      valid1=true
    else
    	date=$((date + timeoffset))
      valid1=true
    fi
  fi
  if ! [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][mh] || "$refreshrate" == [[:xdigit:]][mh] ]] || [[ "${refreshrate: -1}" = h && "${refreshrate%?}" -ge 24 || "${refreshrate: -1}" = m && "${refreshrate%?}" -ge 60 || "${refreshrate%?}" -le 0 ]]; then\
    notisend "Invalid Refresh Rate($refreshrate), loading defaults..."
    find_defaults "refreshrate=[[:digit:]]"
  else
    valid2=true
  fi
done

# Exit if defaults return invalid values
if ! $valid1 || ! $valid2 ; then
  notisend "There is something wrong with your default config options, reinstall"
  exit 1
fi

# Checks if date is a number and then if its in a valid range
if ! [ $date -eq $date ] 2> /dev/null; then
	notisend "Invalid date($date), loading defaults..."
	date=$(date +%H | sed 's/\<0//g')
elif ! [[ "$date" -le "24" && "$date" -ge "0" ]]; then
	notisend "Date is out of range($date), loading defaults..."
	date=$(date +%H | sed 's/\<0//g')
fi

# Check what argument was passed to script
case $1 in
  --preview | -p )
    previewtheme="$2"
    if [[ -z $2 ]]; then
      printf "no theme selected to preview\\nusage: dynamicwall [--preview] <theme>\\n"
      exit 1
    else
      if ! find_theme "$2" p; then
        notisend "Couldn't find $2, exiting..."
        exit 1
      fi
      active_theme="$2"
      trap 'echo ""; break' INT
      date=$((3 + timeoffset))
      while [[ $date -lt $((24 + timeoffset)) ]]; do
        date +"%l:%M %p" -d $((date - timeoffset))
        main_script
        ((++date))
        sleep 1.5
      done
      notisend "Preview complete, reverting to normal..."
      date=$olddate
      active_theme="$cur_theme"
      find_theme "$active_theme"
      main_script
      exit 0
    fi
  ;;
  --force | -f )
    if ! [ $2 -eq $2 ] 2> /dev/null || [[ $2 -gt 24 || $2 -lt 0 ]]; then
      echo "\"$2\" is not a valid time"
      exit 1
    elif [[ -n $2 ]]; then
      date=$(($2 + timeoffset))
    fi
    date +"%l:%M %p" -d $((date - timeoffset)) 2> /dev/null || date +"%l:%M %p"
    if [[ $timeoffset != 0 ]]; then
      echo "offset by $timeoffset"
    fi
    main_script
    echo "Forced script to run, ignoring config changes"
    exit 0
  ;;
  --check | -c )
    if [[ -n $2 ]]; then
      echo "Incompatible arguments, use one at a time, exiting..."
      exit 1
    fi
    update_refreshrate
    update_theme
    update_timeoffset
    main_script
    echo "Updated config and forced run"
    exit 0
  ;;
esac && if [[ -n $3 ]]; then echo "Ignoring extra args..."; fi

if [[ -n $2 ]]; then
  printf '%s\n' "$HELP"
  exit 1
fi
# Compares current values to config file and updates script if they dont match, fallsback to defaults if new values are not valid
if [[ "$refreshrate" != "$active_refreshrate" ]]; then
	update_refreshrate
fi

if [[ "$timeoffset" != "$active_timeoffset" ]]; then
	update_timeoffset
fi

if [[ "$active_theme" != "$cur_theme" ]]; then
	update_theme
	main_script
  olddate=$date
fi

if trueorfalse $printvariables; then
  echo "Theme currently in use is $cur_theme"
  echo "Current theme directory is $theme_dir"
  echo "Time is currently $date"
  echo "Time offset by $timeoffset"
  echo "Refreshrate is $refreshrate"
fi

# Check if time has changed since last exec, then set wallpaper based on time
if [[ "$olddate" != "$date" ]]; then
	main_script
else
	echo "Time hasn't changed since last run, doing nothing..."
fi
