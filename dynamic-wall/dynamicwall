#!/bin/bash
# shellcheck source=dynamicwall.config

# Get current user
usrnm=$(users | awk '{print$1}')
id="$(id -u)"

install_dir="/home/$usrnm/bin"
scheduler=systemd

HELP="\
Usage: dynamicwall [OPTIONS]

optional args:
  -f, --force [time]     Update wallpaper immediately, optionally to a specific time
  -p, --preview <theme>  Run a 24 hour preview for a certain theme
  -c, --config         	 Edit your config file using your default editor
  -s, --status           Display systemd service status/crontab and system-sleep script log
  -l, --list             List available themes to choose from
  -h, --help             Show help"

dtemp="${TMPDIR:-${TMP:-/tmp}}/dynamicwall"
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "getopt --test' failed in this environment. Arguments passed will not be considered."
else
  OPTIONS=f::p:cslh
  LONGOPTS=force::,preview:,config,status,list,help
  ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@" 2>$dtemp/stderr )
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
      # e.g. return value is 1
      #  then getopt has complained about wrong arguments to stdout
      if [[ $(cat $dtemp/stderr) =~ --preview|'p' ]]; then
        printf "No theme selected to preview\\nusage: dynamicwall [--preview] <theme>\\n"
      fi
      exit 2
  fi
  # read getoptâ€™s output this way to handle the quoting right:
  eval set -- "$PARSED"

  # now enjoy the options in order and nicely split until we see --
  while true; do
      case "$1" in
          -f|--force)
              force="${4:-now}"
              shift 2
              ;;
          -p|--preview)
              preview="$2"
              shift 2
              ;;
          -c|--config)
              ${VISUAL:-${EDITOR:-nano}} "$install_dir/dynamic-wall/dynamicwall.config"
              shift
              break
              ;;
          -s|--status)
              if [[ $scheduler = systemd ]]; then
                systemctl --user status dynamicwall.timer dynamicwall.service
              elif [[ $scheduler = cron ]]; then
                [[ -f /lib/systemd/system-sleep/dynamicwall.sh || -f /usr/lib/systemd/system-sleep/dynamicwall.sh ]] && journalctl -b -u systemd-suspend.service
                crontab -l
              else
                echo "Uknown scheduler \"$scheduler\", reinstall"
                exit 1
              fi
              exit 0
              ;;
          -l|--list)
              list=y
              shift
              ;;
          -h|--help)
              printf '%s\n' "$HELP"
              exit 0
              ;;
          --)
              shift
              break
              ;;
          *)
              echo "Programming error"
              exit 3
              ;;
      esac
  done

  if [[ -n $2 ]]; then
    printf "Ignoring extra args\n"
  fi
fi
# Get current time
declare -A date
date[real]=$(date +%H | sed 's/\<0//g')

functionlist=( main_script trueorfalse notisend update_refreshrate update_theme update_timeoffset offsetdate load_overrides find_theme find_defaults )
for FUN in "${functionlist[@]}"; do
    eval "$FUN() {
      unset -f $FUN
      source \"$install_dir/dynamic-wall/functions/$FUN\" \"\${@}\"
    }"
done

# Source Config File
source "$install_dir/dynamic-wall/dynamicwall.config" || { source "$install_dir/dynamic-wall/default.config"; notisend "Can't find user config files, loading defaults...";} || { notisend "Can't find user or default config files, exiting..."; exit 1; }
date[desktop]=${date[real]}
date[lockscreen]=${date[real]}
# Get cached values
oldvar_dir="$install_dir/dynamic-wall/.oldvar"
olddate_dir="$dtemp"
source <(cat $oldvar_dir/* 2>/dev/null)
mkdir -p -- "$olddate_dir"
source <(cat $olddate_dir/* 2>/dev/null)

if [[ -n $list ]]; then
  echo "Available themes:"
  ls $theme_dir
  exit 0
fi

# Checks if users current theme exist
[[ "$active_theme" != "$cur_theme" ]] && find_theme "cur_theme" || find_theme "cur_theme" skipcheck
if [[ -n $lock_theme ]]; then
  [[ "$active_theme_lock" != "$lock_theme" ]] && find_theme "lock_theme" "" "lock" || find_theme "lock_theme" skipcheck "lock"
fi

# Checks if timeoffset is a number and then if it is range and checks if refreshrate is in a valid format
if [[ "$active_timeoffset" != "$timeoffset" ]] || [[ "$active_timeoffset_lock" != "$lock_timeoffset" ]]; then
  valid1=false
  for ((n=0;n<2;n++)); do
    if ! [ "$timeoffset" -eq "$timeoffset" ] 2> /dev/null; then
    	notisend "Invalid Time Offset($timeoffset), loading defaults..."
    	find_defaults "timeoffset=[[:digit:]]"
    else
      if ! [[ "$timeoffset" -le "23" && "$timeoffset" -ge "-23" ]]; then
      	notisend "Time Offset is out of range($timeoffset), loading defaults..."
      	find_defaults "timeoffset=[[:digit:]]"
      else
        offsetdate desktop timeoffset && valid1=true
      fi
    fi
  done

  valid3=false
  for ((n=0;n<2;n++)); do
    if ! [ "$lock_timeoffset" -eq "$lock_timeoffset" ] 2> /dev/null; then
    	notisend "Invalid Time Offset($lock_timeoffset), loading defaults..."
    	find_defaults "lock_timeoffset=[[:digit:]]"
    else
      if ! [[ "$lock_timeoffset" -le "23" && "$lock_timeoffset" -ge "-23" ]]; then
      	notisend "Time Offset is out of range($lock_timeoffset), loading defaults..."
      	find_defaults "lock_timeoffset=[[:digit:]]"
      else
        offsetdate lockscreen lock_timeoffset && valid3=true
      fi
    fi
  done
else
  offsetdate desktop timeoffset
  offsetdate lockscreen lock_timeoffset
fi

if [[ $active_refreshrate != "$refreshrate" ]]; then
  valid2=false
  for ((n=0;n<2;n++)); do
    if ! [[ "$refreshrate" == [[:xdigit:]][[:xdigit:]][mh] || "$refreshrate" == [[:xdigit:]][mh] ]] || [[ "${refreshrate: -1}" = h && "${refreshrate%?}" -ge 24 || "${refreshrate: -1}" = m && "${refreshrate%?}" -ge 60 || "${refreshrate%?}" -le 0 ]]; then\
      notisend "Invalid Refresh Rate($refreshrate), loading defaults..."
      find_defaults "refreshrate=[[:digit:]]"
    else
      valid2=true
    fi
  done
fi

# Exit if defaults return invalid values
if ! $valid1 || ! $valid2 || ! $valid3; then
  notisend "There is something wrong with your default config options, reinstall"
  exit 1
fi

# Checks if date is a number and then if its in a valid range
if ! [ ${date[real]} -eq ${date[real]} ] 2> /dev/null; then
	notisend "Invalid date(${date[real]}), loading defaults..."
	date[real]=$(date +%H | sed 's/\<0//g')
elif ! [[ "${date[real]}" -le "24" && "${date[real]}" -ge "0" ]]; then
	notisend "Date is out of range(${date[real]}), loading defaults..."
	date[real]=$(date +%H | sed 's/\<0//g')
fi

# Check what argument was passed to script
if [[ -n $preview ]]; then
  previewtheme="$preview"
  if ! find_theme "previewtheme" preview; then
    notisend "Couldn't find $previewtheme, exiting..."
    exit 1
  fi
  active_theme="$previewtheme"
  [[ -n $lock_theme ]] && cache=$lock_theme
  unset lock_theme
  trap 'echo; break' INT
  date[desktop]=$((3 + timeoffset))
  while [[ ${date[desktop]} -lt $((24 + timeoffset)) ]]; do
    date +"%l:%M %p" -d $((date[desktop] - timeoffset))
    main_script
    ((++date[desktop]))
    sleep 1.5
  done
  notisend "Preview complete, reverting to normal..."
  date[desktop]=$olddate
  active_theme="$cur_theme"
  lock_theme=$cache
  find_theme "cur_theme"
  main_script
  exit 0
elif [[ -n $force ]]; then
  if ! [[ $force = "now" ]]; then
    if ! [ $force -eq $force ] 2> /dev/null || [[ $force -gt 24 || $force -lt 0 ]]; then
      echo "\"$force\" is not a valid time"
      exit 1
    else
      date[desktop]=$(($force + timeoffset))
      date[lockscreen]=$(($force + lock_timeoffset))
    fi
  fi

  if [[ $timeoffset != 0 ]]; then
    printf "Desktop offset by $timeoffset,   "
    date +"%l:%M %p" -d ${date[desktop]} 2> /dev/null || date +" %l:%M %p"
  fi
  if [[ $lock_timeoffset != 0 ]] && [[ -n $lock_theme ]]; then
    printf "Lockscreen offset by $lock_timeoffset,"
    date +"%l:%M %p" -d ${date[lockscreen]} 2> /dev/null || date +" %l:%M %p"
  fi
  if ! [[ $timeoffset != 0 || $lock_timeoffset != 0 ]]; then
    date +"%l:%M %p" -d $((date[desktop] - timeoffset )) 2> /dev/null || date +" %l:%M %p"
  fi
  main_script
  echo "Forced script to run, ignoring config changes"
  exit 0
fi

# Compares current values to config file and updates script if they dont match, fallsback to defaults if new values are not valid
if [[ "$refreshrate" != "$active_refreshrate" ]]; then
	update_refreshrate
fi

if [[ "$timeoffset" != "$active_timeoffset" ]] || [[ "$lock_timeoffset" != "$active_timeoffset_lock" ]] ; then
	update_timeoffset
fi

if [[ "$active_theme" != "$cur_theme" ]] || [[ -n $lock_theme && "$active_theme_lock" != "$lock_theme" ]] ; then
	update_theme
	main_script
  olddate=${date[desktop]}
  olddate_lock=${date[lockscreen]}
fi

if trueorfalse $printvariables; then
  echo "Theme currently in use is $cur_theme"
  echo "Current theme directory is $theme_dir"
  echo "Time is currently ${date[real]}"
  echo "Time offset by $timeoffset"
  echo "Refreshrate is $refreshrate"
fi

# Check if time has changed since last exec, then set wallpaper based on time
if [[ "$olddate" != "${date[desktop]}" ]] || [[ -n $lock_theme && "$olddate_lock" != "${date[lockscreen]}" ]]; then
	main_script
else
	echo "Time hasn't changed since last run, doing nothing..."
fi
