#!/bin/bash
# shellcheck source=../dynamicwall.config

#check true or false config options
function trueorfalse() {
  case $1 in
    TRUE | True | true | T | t | 1 )
      return 0
      ;;
    FALSE | False | false | F | f | 0 )
      return 1
      ;;
    * )
      echo "Unknown option \"$1\", assuming false. Check your config file...."
      return 1
      ;;
  esac
}

#Check config and show notifications if enabled
function notisend() {
  if trueorfalse $notifications; then
    if [[ $id = 1000 ]]; then
      prefix=(env "XDG_RUNTIME_DIR=/run/user/1000")
    else
      prefix=(sudo -u "$usrnm" \
      "XDG_RUNTIME_DIR=/run/user/1000" \
      "DISPLAY=:0" \
      "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus")
    fi
    "${prefix[@]}" \
    kdialog --title "Dynamic Wallpaper" --passivepopup "$1" 4
  fi
  echo "$1"
}

function offsetdate(){
  if [[ $((date[real] + $2)) -gt 24 ]]; then
    date[$1]=$((date[real] - 24 + $2))
  elif [[ $((date[real] + $2)) -lt 0 ]]; then
    date[$1]=$((date[real] + 24 + $2))
  else
    date[$1]=$((date[real] + $2))
  fi
}

function load_overrides() {
  overrides="$(grep "$2" "$theme_dir/$1/override.config")"
	if [[ -n $overrides ]]  2> /dev/null
	then
    eval "$overrides"
    if trueorfalse $printvariables; then
      echo "Loading variable overrides from $1/override.config"
      echo "The following variables have been overridden:"
      awk '/=/ && !/#/' "$theme_dir/$1/override.config"
      echo
    fi
	fi
}

function find_theme() {
	if [[ $2 = "skipcheck" ]] || find "$theme_dir/${!1}/${!1}"* > /dev/null 2>&1; then
		filedir=$(basename "$(find "$theme_dir" -name "${!1}*" -type f | tail -1)")
		ext[${!1}]=${filedir##*.}
		case ${ext[${!1}]} in
			jpg | jpeg | png )
				if [[ $2 != defaults ]]; then
					load_overrides ${!1} $3
				fi
        [[ -n $attempts ]] && echo "Successfully loaded default theme ${!1} for $1"
				return 0
				;;
			* )
				echo "Incompatible image type(${ext[${!1}]}), exiting..."
				exit 1
				;;
		esac
	else
		((++attempts))
		printf "\nAttempt $attempts\n"
		if [[ $attempts = 1 ]]; then
			notisend "Could not find ${!1}, attempting to recover..."
			echo "Your theme_dir may not be set correctly or your $1 may be mispelt, check your dynamicwall.config"
			echo "Attempting to use default theme directory"
			find_defaults "theme_dir" "$2"
		elif [[ $attempts = 2 ]]; then
			if [[ $3 = "preview" ]]; then
				return 1
			fi
			echo "Could not find theme in default directory"
			echo "Attempting to use default theme in users theme directory"
			eval "$(grep "theme_dir" < "$install_dir/dynamic-wall/dynamicwall.config")"
			find_defaults "$1" "$2"
		elif [[ $attempts = 3 ]]; then
			echo "Could not find default theme in users theme directory"
			echo "Attempting to use default theme in default theme directory"
			find_defaults "theme_dir" "$2"
		else
			notisend "There are some major problems with your installation/configuration, reinstall dynamicwall"
			return 1
		fi
	fi
}

# Loads default value fed into function. If previewing, locate
function find_defaults() {
	if ! [[ -f $install_dir/dynamic-wall/default.config ]]; then
		notisend "Can't find default config file, exiting..."
		exit 1
	fi
	eval "$(grep "$1" < "$install_dir/dynamic-wall/default.config")"
  notisend "loaded $(grep "$1" < "$install_dir/dynamic-wall/default.config")"
  if [[ $1 = "theme_dir" ]] || [[ $1 = "cur_theme" ]] || [[ $1 = "lock_theme" ]]; then
  	if [[ $2 = "preview" ]]; then
  		find_theme "previewtheme" defaults preview
      return $?
  	elif [[ "$cur_theme" != "$active_theme" ]]; then
  		if ! find_theme "cur_theme" defaults; then
    		echo "Can't locate $cur_theme in default theme directory, exiting..."
    		exit 1
  		fi
      active_theme="$cur_theme"
    elif [[ "$lock_theme" != "$active_theme_lock" ]]; then
  		if ! find_theme "lock_theme" defaults; then
    		echo "Can't locate $lock_theme in default theme directory, exiting..."
    		exit 1
  		fi
      active_theme_lock="$lock_theme"
  	fi
  fi
}
